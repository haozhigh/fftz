#define SQRT2_2 0.7071067811865475244f
__kernel void gpuFFTOct(__global float* data0, __global float* data1, int N, int Ns){
	int idx, idxS, idxD;
	float c1, s1, c2, s2, c3, s3;
	float vo[16];
	float v0, v1;
	float rcis, rsic;

	idx = get_global_id(0);

	idxS = idx;
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	vo[0] = v0;
	vo[1] = v1;
	vo[2] = v0;
	vo[3] = v1;
	vo[4] = v0;
	vo[5] = v1;
	vo[6] = v0;
	vo[7] = v1;
	vo[8] = v0;
	vo[9] = v1;
	vo[10] = v0;
	vo[11] = v1;
	vo[12] = v0;
	vo[13] = v1;
	vo[14] = v0;
	vo[15] = v1;

	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	s1 = - M_PI_F * (idx % Ns) / (Ns<<2);
	c1 = cos(s1);
	s1 = sin(s1);
	rcis = v0 * c1 - v1 * s1;
	rsic = v0 * s1 + v1 * c1;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[4] = vo[4] + rsic;
	vo[5] = vo[5] - rcis;
	vo[8] = vo[8] - rcis;
	vo[9] = vo[9] - rsic;
	vo[12] = vo[12] - rsic;
	vo[13] = vo[13] + rcis;
	c2 = (c1 + s1) * SQRT2_2;
	s2 = (s1 - c1) * SQRT2_2;
	rcis = v0 * c2 - v1 * s2;
	rsic = v0 * s2 + v1 * c2;
	vo[2] = vo[2] + rcis;
	vo[3] = vo[3] + rsic;
	vo[6] = vo[6] + rsic;
	vo[7] = vo[7] - rcis;
	vo[10] = vo[10] - rcis;
	vo[11] = vo[11] - rsic;
	vo[14] = vo[14] - rsic;
	vo[15] = vo[15] + rcis;
	
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c3 = c1 * c1 - s1 * s1;
	s3 = s1 * c1 * 2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[2] = vo[2] + rsic;
	vo[3] = vo[3] - rcis;
	vo[4] = vo[4] - rcis;
	vo[5] = vo[5] - rsic;
	vo[6] = vo[6] - rsic;
	vo[7] = vo[7] + rcis;
	vo[8] = vo[8] + rcis;
	vo[9] = vo[9] + rsic;
	vo[10] = vo[10] + rsic;
	vo[11] = vo[11] - rcis;
	vo[12] = vo[12] - rcis;
	vo[13] = vo[13] - rsic;
	vo[14] = vo[14] - rsic;
	vo[15] = vo[15] + rcis;
	
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c2 = c1 * c3 - s1 * s3;
	s2 = s1 * c3 + c1 * s3;
	rcis = v0 * c2 - v1 * s2;
	rsic = v0 * s2 + v1 * c2;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[12] = vo[12] + rsic;
	vo[13] = vo[13] - rcis;
	vo[8] = vo[8] - rcis;
	vo[9] = vo[9] - rsic;
	vo[4] = vo[4] - rsic;
	vo[5] = vo[5] + rcis;
	c3 = (c2 + s2) * SQRT2_2;
	s3 = (s2 - c2) * SQRT2_2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[6] = vo[6] + rcis;
	vo[7] = vo[7] + rsic;
	vo[2] = vo[2] + rsic;
	vo[3] = vo[3] - rcis;
	vo[14] = vo[14] - rcis;
	vo[15] = vo[15] - rsic;
	vo[10] = vo[10] - rsic;
	vo[11] = vo[11] + rcis;
	
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c3 = c1 * c2 - s1 * s2;
	s3 = s1 * c2 + c1 * s2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[4] = vo[4] + rcis;
	vo[5] = vo[5] + rsic;
	vo[8] = vo[8] + rcis;
	vo[9] = vo[9] + rsic;
	vo[12] = vo[12] + rcis;
	vo[13] = vo[13] + rsic;
	vo[2] = vo[2] - rcis;
	vo[3] = vo[3] - rsic;
	vo[6] = vo[6] - rcis;
	vo[7] = vo[7] - rsic;
	vo[10] = vo[10] - rcis;
	vo[11] = vo[11] - rsic;
	vo[14] = vo[14] - rcis;
	vo[15] = vo[15] - rsic;
	
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c2 = c1 * c3 - s1 * s3;
	s2 = s1 * c3 + c1 * s3;
	rcis = v0 * c2 - v1 * s2;
	rsic = v0 * s2 + v1 * c2;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[4] = vo[4] + rsic;
	vo[5] = vo[5] - rcis;
	vo[8] = vo[8] - rcis;
	vo[9] = vo[9] - rsic;
	vo[12] = vo[12] - rsic;
	vo[13] = vo[13] + rcis;
	c3 = (c2 + s2) * SQRT2_2;
	s3 = (s2 - c2) * SQRT2_2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[10] = vo[10] + rcis;
	vo[11] = vo[11] + rsic;
	vo[14] = vo[14] + rsic;
	vo[15] = vo[15] - rcis;
	vo[2] = vo[2] - rcis;
	vo[3] = vo[3] - rsic;
	vo[6] = vo[6] - rsic;
	vo[7] = vo[7] + rcis;
	
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c3 = c1 * c2 - s1 * s2;
	s3 = s1 * c2 + c1 * s2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[14] = vo[14] + rsic;
	vo[15] = vo[15] - rcis;
	vo[12] = vo[12] - rcis;
	vo[13] = vo[13] - rsic;
	vo[10] = vo[10] - rsic;
	vo[11] = vo[11] + rcis;
	vo[8] = vo[8] + rcis;
	vo[9] = vo[9] + rsic;
	vo[6] = vo[6] + rsic;
	vo[7] = vo[7] - rcis;
	vo[4] = vo[4] - rcis;
	vo[5] = vo[5] - rsic;
	vo[2] = vo[2] - rsic;
	vo[3] = vo[3] + rcis;
		
	idxS += (N>>3);
	v0 = data0[idxS];
	v1 = data0[idxS + N];
	c2 = c1 * c3 - s1 * s3;
	s2 = s1 * c3 + c1 * s3;
	rcis = v0 * c2 - v1 * s2;
	rsic = v0 * s2 + v1 * c2;
	vo[0] = vo[0] + rcis;
	vo[1] = vo[1] + rsic;
	vo[12] = vo[12] + rsic;
	vo[13] = vo[13] - rcis;
	vo[8] = vo[8] - rcis;
	vo[9] = vo[9] - rsic;
	vo[4] = vo[4] - rsic;
	vo[5] = vo[5] + rcis;
	c3 = (c2 + s2) * SQRT2_2;
	s3 = (s2 - c2) * SQRT2_2;
	rcis = v0 * c3 - v1 * s3;
	rsic = v0 * s3 + v1 * c3;
	vo[14] = vo[14] + rcis;
	vo[15] = vo[15] + rsic;
	vo[10] = vo[10] + rsic;
	vo[11] = vo[11] - rcis;
	vo[6] = vo[6] - rcis;
	vo[7] = vo[7] - rsic;
	vo[2] = vo[2] - rsic;
	vo[3] = vo[3] + rcis;

	idxD = (idx / Ns) * (Ns<<3) + (idx % Ns);
	data1[idxD] = vo[0];
	data1[idxD + N] = vo[1];
	idxD += Ns;
	data1[idxD] = vo[2];
	data1[idxD + N] = vo[3];
	idxD += Ns;
	data1[idxD] = vo[4];
	data1[idxD + N] = vo[5];
	idxD += Ns;
	data1[idxD] = vo[6];
	data1[idxD + N] = vo[7];
	idxD += Ns;
	data1[idxD] = vo[8];
	data1[idxD + N] = vo[9];
	idxD += Ns;
	data1[idxD] = vo[10];
	data1[idxD + N] = vo[11];
	idxD += Ns;
	data1[idxD] = vo[12];
	data1[idxD + N] = vo[13];
	idxD += Ns;
	data1[idxD] = vo[14];
	data1[idxD + N] = vo[15];
}
